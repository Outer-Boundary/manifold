ARG ENV_FILE=.env

###########################
## Base cargo-chef Image ##
###########################

FROM rust:latest AS chef
WORKDIR /app
RUN cargo install cargo-chef

###################
## Planner Image ##
###################

# Generate a recipe file for dependencies
FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

##################
## Cacher Image ##
##################

# Build the dependencies
FROM chef AS cacher
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

###################
## Builder Image ##
###################

# Use the main official rust docker image as the builder image
FROM rust:latest AS builder
ARG ENV_FILE

# Creae appuser
ENV USER=web
ENV UID=1001

RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    "${USER}"

# Copy source into the docker image
WORKDIR /app
COPY . .
COPY ${ENV_FILE} .env

# Copy dependencies from cacher image
COPY --from=cacher /app/target target
COPY --from=cacher /usr/local/cargo /usr/local/cargo

# Build the backend
RUN cargo build --release

###################
## Runtime Image ##
###################

# Use google distroless image as runtime image
FROM gcr.io/distroless/cc-debian11
ARG ENV_FILE

# Import appuser from builder
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Copy built backend from builder image
WORKDIR /app
COPY --from=builder /app/target/release/backend backend
COPY --from=builder /app/${ENV_FILE} .env

USER web:web

# Start the backend
CMD ["./backend"]